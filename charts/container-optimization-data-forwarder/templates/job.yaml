{{- if .Values.job.enable }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "common.fullname" . }}
  namespace: {{ template "common.namespace" . }}
  labels:
    app: {{ template "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  backoffLimit: 4
  template:
    metadata:
      labels:
        app: {{ template "common.name" . }}
        release: {{ .Release.Name }}
    spec:
      nodeSelector:
        kubernetes.io/os: linux
        kubernetes.io/arch: amd64
      {{- if .Values.nodeSelector }}
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if or (.Values.serviceAccount.create) (.Values.serviceAccount.name) (and (.Values.config.prometheus.sigv4) (not (or .Values.config.prometheus.sigv4.AwsSecretName .Values.config.prometheus.sigv4.access_key))) }}
      serviceAccountName: {{ template "common.serviceAccountName" . }}
      {{- end }}
      initContainers:
      {{- if .Values.job.checkPrometheusReady }}
      - name: check-prometheus-ready
        image: {{ .Values.imageCheckPrometheusReady }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        env:
        - name: TARGET_HOST
          value: "{{ .Values.config.prometheus.url.host }}"
        - name: TARGET_PORT
          value: {{ template "common.prometheusPort" . }}
        command: ["/bin/sh", "-c"]
        args:
        - |
          until nc -vz -w 3 ${TARGET_HOST} ${TARGET_PORT}; do
            echo "Waiting for Prometheus server ${TARGET_HOST} port ${TARGET_PORT}"
            sleep 2
          done
      {{- end }}
      {{- if .Values.config.prometheus.AzureMonitorSecretName }}
      - name: azure-token
        image: "{{ .Values.imageAzureToken }}"
        imagePullPolicy: {{ .Values.pullPolicy }}
        env:
        - name: ENTRA_SERVICE_PRINCIPAL
          value: "/home/densify/.azmon/app.json"
        - name: AZURE_RESOURCE
          value: "https://prometheus.monitor.azure.com"
        - name: BEARER_TOKEN_FILE
          value: "/home/densify/.tokens/token"
        volumeMounts:
        - mountPath: /home/densify/.azmon
          name: azmon
          readOnly: true
        - mountPath: /home/densify/.tokens
          name: tokens
      {{- end }}
      containers:
        - name: {{ template "common.name" . }}
          image: "{{ .Values.image }}"
          imagePullPolicy: {{ .Values.pullPolicy }}
          env:
            - name: CONFIG_TYPE
              value: "yaml"
            {{- if .Values.config.forwarder.densify.url.UserSecretName }}
            - name: DENSIFY_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.forwarder.densify.url.UserSecretName }}
                  key: username
            - name: DENSIFY_EPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.forwarder.densify.url.UserSecretName }}
                  key: epassword
            {{- end }}
            {{- if and (.Values.config.forwarder.proxy) (.Values.config.forwarder.proxy.url) (.Values.config.forwarder.proxy.url.ProxySecretName) }}
            - name: DENSIFY_PROXYUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.forwarder.proxy.url.ProxySecretName }}
                  key: username
            - name: DENSIFY_PROXYPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.forwarder.proxy.url.ProxySecretName }}
                  key: password
            {{- end }}
            {{- if .Values.config.prometheus.url.PrometheusSecretName }}
            - name: PROMETHEUS_USER
              value: "/home/densify/.prometheus/username"
            - name: PROMETHEUS_PASSWORD
              value: "/home/densify/.prometheus/password"
            {{- end }}              
            {{- if .Values.config.prometheus.AzureMonitorSecretName }}
            - name: PROMETHEUS_OAUTH_TOKEN
              value: "/home/densify/.tokens/token"
            {{- end }}
            {{- if .Values.config.prometheus.CaCertSecretName }}
            - name: CA_CERTIFICATE
              value: "/home/densify/.certs/ca.crt"
            {{- end }}
          volumeMounts:
          - name: config
            mountPath: /config
          {{- if .Values.config.prometheus.url.PrometheusSecretName }}
          - name: prometheus
            mountPath: /home/densify/.prometheus
            readOnly: true
          {{- end }}
          {{- if and (.Values.config.prometheus.sigv4) (.Values.config.prometheus.sigv4.AwsSecretName) }}
          - name: aws
            mountPath: /home/densify/.aws
            readOnly: true
          {{- end }}
          {{- if .Values.config.prometheus.AzureMonitorSecretName }}
          - name: tokens
            mountPath: /home/densify/.tokens
          {{- end }}
          {{- if .Values.config.prometheus.CaCertSecretName }}
          - name: certs
            mountPath: /home/densify/.certs
            readOnly: true
          {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "common.fullname" . }}
            items:
            - key: config.yaml
              path: config.yaml
        {{- if .Values.config.prometheus.url.PrometheusSecretName }}
        - name: prometheus
          secret:
            secretName: {{ .Values.config.prometheus.url.PrometheusSecretName }}
        {{- end }}
        {{- if and (.Values.config.prometheus.sigv4) (.Values.config.prometheus.sigv4.AwsSecretName) }}
        - name: aws
          secret:
            secretName: {{ .Values.config.prometheus.sigv4.AwsSecretName }}
        {{- end }}
        {{- if .Values.config.prometheus.AzureMonitorSecretName }}
        - name: tokens
          emptyDir: {}
        - name: azmon
          secret:
            secretName: {{ .Values.config.prometheus.AzureMonitorSecretName }}
        {{- end }}
        {{- if .Values.config.prometheus.CaCertSecretName }}
        - name: certs
          secret:
            secretName: {{ .Values.config.prometheus.CaCertSecretName }}
        {{- end }}
      restartPolicy: Never
{{- end }}
